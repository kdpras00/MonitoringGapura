<x-filament::page    :class="\Illuminate\Support\Arr::toCssClasses([        'filament-resources-view-record-page',        'filament-resources-' . str_replace('/', '-', $this->getResource()::getSlug()) . '-view-record-page',    ])">    {{-- Tambahkan CSRF token untuk AJAX requests --}}    <meta name="csrf-token" content="{{ csrf_token() }}">    @if ($this->hasInfolist())        {{ $this->infolist }}    @else        <x-filament::card>            {{ $this->form }}        </x-filament::card>    @endif    <x-filament::modal id="verify-modal" heading="Verifikasi Inspeksi">        <form id="verify-form">            <div class="mb-4">                <label for="verification-notes" class="block text-sm font-medium text-gray-700">Catatan Verifikasi</label>                <textarea id="verification-notes" name="verification_notes" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring focus:ring-primary-500 focus:ring-opacity-50"></textarea>            </div>                        <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">                <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:ml-3 sm:w-auto sm:text-sm">                    Verifikasi                </button>                <button type="button" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:mt-0 sm:w-auto sm:text-sm" onclick="document.getElementById('verify-modal').classList.add('hidden')">                    Batal                </button>            </div>        </form>    </x-filament::modal>    <x-filament::modal id="reject-modal" heading="Tolak Inspeksi">        <form id="reject-form">            <div class="mb-4">                <label for="reject-notes" class="block text-sm font-medium text-gray-700">Alasan Penolakan</label>                <textarea id="reject-notes" name="verification_notes" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring focus:ring-primary-500 focus:ring-opacity-50" required></textarea>            </div>                        <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">                <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm">                    Tolak                </button>                <button type="button" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:mt-0 sm:w-auto sm:text-sm" onclick="document.getElementById('reject-modal').classList.add('hidden')">                    Batal                </button>            </div>        </form>    </x-filament::modal>    <script>        document.addEventListener('DOMContentLoaded', function() {            // Pastikan CSRF token tersedia            const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
            if (!csrfToken) {                console.error('CSRF token not found');            }
            console.log('Verification page loaded, CSRF token:', csrfToken ? 'Available' : 'Not available');
            // Override tombol verifikasi asli            const verifyActionBtn = document.querySelector('[wire\\:click*="mountAction(\'verify\'"]');            if (verifyActionBtn) {                console.log('Verify button found');                verifyActionBtn.addEventListener('click', function(e) {                    e.preventDefault();                    e.stopPropagation();                    document.getElementById('verify-modal').classList.remove('hidden');                });            } else {                console.error('Verify button not found');            }
            // Override tombol reject asli            const rejectActionBtn = document.querySelector('[wire\\:click*="mountAction(\'reject\'"]');            if (rejectActionBtn) {                console.log('Reject button found');                rejectActionBtn.addEventListener('click', function(e) {                    e.preventDefault();                    e.stopPropagation();                    document.getElementById('reject-modal').classList.remove('hidden');                });            } else {                console.error('Reject button not found');            }
            // Handle form submission untuk verifikasi            document.getElementById('verify-form').addEventListener('submit', function(e) {                e.preventDefault();                console.log('Verify form submitted');
            // Dapatkan ID inspeksi dari URL                const urlParts = window.location.pathname.split('/');                const inspectionId = urlParts[urlParts.length - 1];                console.log('Inspection ID:', inspectionId);
            // Dapatkan catatan verifikasi                const notes = document.getElementById('verification-notes').value;                console.log('Verification notes:', notes);
            // Tampilkan loading indicator                const submitBtn = this.querySelector('button[type="submit"]');                const originalText = submitBtn.innerText;                submitBtn.innerText = 'Processing...';                submitBtn.disabled = true;
            // Kirim request ke endpoint yang aman                fetch(`/inspections/${inspectionId}/verify`, {                    method: 'POST',                    headers: {                        'Content-Type': 'application/json',                        'X-CSRF-TOKEN': csrfToken,                        'Accept': 'application/json'                    },                    body: JSON.stringify({ verification_notes: notes })                })                .then(response => {                    console.log('Response status:', response.status);                    return response.json();                })                .then(data => {                    console.log('Response data:', data);
                    if (data.status === 'success') {                        alert('Berhasil: ' + data.message);
                    // Sembunyikan modal                        document.getElementById('verify-modal').classList.add('hidden');
                    // Reload halaman setelah delay singkat                        setTimeout(() => {                            window.location.reload();                        }, 500);                    } else {                        alert('Gagal: ' + (data.message || 'Terjadi kesalahan saat memverifikasi inspeksi'));
                    // Kembalikan tombol ke keadaan semula                        submitBtn.innerText = originalText;                        submitBtn.disabled = false;                    }                })                .catch(error => {                    console.error('Error:', error);                    alert('Terjadi kesalahan saat memverifikasi inspeksi: ' + error.message);
                    // Kembalikan tombol ke keadaan semula                        submitBtn.innerText = originalText;                        submitBtn.disabled = false;                });            });
            // Handle form submission untuk reject            document.getElementById('reject-form').addEventListener('submit', function(e) {                e.preventDefault();                console.log('Reject form submitted');
            // Dapatkan ID inspeksi dari URL                const urlParts = window.location.pathname.split('/');                const inspectionId = urlParts[urlParts.length - 1];                console.log('Inspection ID:', inspectionId);
            // Dapatkan catatan penolakan                const notes = document.getElementById('reject-notes').value;                console.log('Rejection notes:', notes);
            if (!notes) {                    alert('Alasan penolakan wajib diisi');                    return;                }
            // Tampilkan loading indicator                const submitBtn = this.querySelector('button[type="submit"]');                const originalText = submitBtn.innerText;                submitBtn.innerText = 'Processing...';                submitBtn.disabled = true;
            // Kirim request ke endpoint yang aman                fetch(`/inspections/${inspectionId}/reject`, {                    method: 'POST',                    headers: {                        'Content-Type': 'application/json',                        'X-CSRF-TOKEN': csrfToken,                        'Accept': 'application/json'                    },                    body: JSON.stringify({ verification_notes: notes })                })                .then(response => {                    console.log('Response status:', response.status);                    return response.json();                })                .then(data => {                    console.log('Response data:', data);
                    if (data.status === 'success') {                        alert('Berhasil: ' + data.message);
                    // Sembunyikan modal                        document.getElementById('reject-modal').classList.add('hidden');
                    // Reload halaman setelah delay singkat                        setTimeout(() => {                            window.location.reload();                        }, 500);                    } else {                        alert('Gagal: ' + (data.message || 'Terjadi kesalahan saat menolak inspeksi'));
                    // Kembalikan tombol ke keadaan semula                        submitBtn.innerText = originalText;                        submitBtn.disabled = false;                    }                })                .catch(error => {                    console.error('Error:', error);                    alert('Terjadi kesalahan saat menolak inspeksi: ' + error.message);
                    // Kembalikan tombol ke keadaan semula                        submitBtn.innerText = originalText;                        submitBtn.disabled = false;                });            });        });    </script></x-filament::page>
